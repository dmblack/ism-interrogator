{"version":3,"sources":["ISMControl.js","Filter.js","App.js","serviceWorker.js","index.js"],"names":["ISMControl","props","className","id","control","Identifier","onClick","tag","OFFICIAL","PROTECTED","SECRET","TOP_SECRET","tagged","icon","faTag","Guideline","split","Topic","Description","Revision","Updated","Filter","handleChange","event","emitChangeDebounced","debounce","context","handleDescriptionChange","value","handleGuidelineChange","handleIdentifierChange","useEffect","cancel","htmlFor","minLength","defaultValue","interrogate","descriptionFilter","type","onChange","e","target","name","guidelineOptions","identifierFilter","data-tip","useQuery","URLSearchParams","useLocation","search","App","hash","urlQueryControls","get","urlControls","urlQueryControlsTagged","urlControlsTagged","ISM","ISMRaw","Control","sort","controlA","controlB","useState","controls","controlList","controlsTagged","guidelineFilter","searchCollapse","setInterrogate","previousState","filter","toLowerCase","includes","window","scrollTo","setTimeout","replace","element","document","getElementById","scrollIntoView","Set","map","guideline","faChevronUp","size","faChevronDown","aria-expanded","length","onDoubleClick","navigator","clipboard","writeText","join","identifier","newTaggedControls","handleTagControl","test","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3fa326d6.chunk.js","sourcesContent":["import React from 'react';\nimport './ISMControl.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTag } from '@fortawesome/free-solid-svg-icons'\n\nconst ISMControl = (props) => {\n  return (\n    <div className=\"list-group-item list-group-item-action flex-column align-tems-start control\" id={props.control.Identifier} onClick={props.tag}>\n      <div className=\"d-flex w-100 justify-content-between control-identifier\">\n        <h1 className=\"mb-1\">\n          {props.control.Identifier}\n        </h1>\n        <small className=\"control-applicability\">\n          [\n          {props.control.OFFICIAL === \"Yes\" ? \" OFFICIAL \" : \" \"}\n          {props.control.PROTECTED === \"Yes\" ? \"PROTECTED \" : \"\"}\n          {props.control.SECRET === \"Yes\" ? \"SECRET \" : \"\"}\n          {props.control.TOP_SECRET === \"Yes\" ? \"TOP_SECRET \" : \"\"}\n          ]\n          {\n            props.tagged &&\n            <FontAwesomeIcon\n              className=\"tagged\"\n              icon={faTag}\n            />\n          }\n        </small>\n      </div>\n      <h4 className=\"control-guideline\">\n        {props.control.Guideline.split('Guidelines for ')[1]}\n      </h4>\n      <h6 className=\"control-topic\">\n        {props.control.Topic}\n      </h6>\n      <p className=\"mb-1 control-description\">\n        {props.control.Description}\n      </p>\n      <div className=\"d-flex w-100 justify-content-between\">\n        <p className=\"mb-1\"></p>\n        <small className=\"control-revision-updated\">\n          Rev:{props.control.Revision} - {props.control.Updated}\n        </small>\n      </div>\n    </div>\n  );\n}\n\nexport default ISMControl;\n","import debounce from 'lodash.debounce';\nimport './Filter.css';\nimport { React, useEffect } from 'react';\n\n\nconst Filter = (props) => {\n  const handleChange = event => {\n    emitChangeDebounced(event);\n  }\n\n  const emitChange = (event) => {\n    switch(event.context) {\n      case 'description': \n        props.handleDescriptionChange(event.value);\n        break;\n      case 'guideline':\n        props.handleGuidelineChange(event.value);\n        break;\n      case 'identifier':\n        props.handleIdentifierChange(event.value);\n        break;\n      default:\n        break;\n    }\n  }\n  \n  const emitChangeDebounced = debounce(emitChange, 250);\n\n  useEffect(() => { \n    emitChangeDebounced.cancel()\n   }, [emitChangeDebounced])\n\n  return (\n    <form className=\"filters\">\n      <div className=\"filter form-group row\">\n        <label\n          htmlFor=\"description\"\n          className=\"col-sm-2 col-form-label\">\n          Description\n        </label>\n        <div className=\"col-sm-10\">\n          <input\n            minLength={2}\n            id=\"description\"\n            defaultValue={props.interrogate.descriptionFilter}\n            type=\"text\"\n            onChange={(e) => { handleChange({ context: 'description', value: e.target.value })}}\n            className=\"form-control\"\n          />\n        </div>\n      </div>\n      <div className=\"filter form-group row\">\n        <label\n          htmlFor=\"guideline\"\n          className=\"col-sm-2 col-form-label\">\n          Guideline\n        </label>\n        <div className=\"col-sm-10\">\n          <select\n            name=\"guideline\"\n            id=\"guideline\"\n            onChange={(e) => { handleChange({ context: 'guideline', value: e.target.value })}}\n            className=\"form-control\">\n            <option value=\"\"></option>\n            {props.guidelineOptions}\n          </select>\n        </div>\n      </div>\n      <div className=\"filter form-group row\">\n        <label\n          htmlFor=\"identifier\"\n          className=\"col-sm-2 col-form-label\">\n          Identifier\n        </label>\n        <div className=\"col-sm-10\">\n          <input\n            minLength={1}\n            id=\"identifier\"\n            defaultValue={props.interrogate.identifierFilter}\n            type=\"text\"\n            onChange={(e) => { handleChange({ context: 'identifier', value: e.target.value })}}\n            className=\"form-control\"\n            data-tip=\"Separate multiple with ','\"\n          />\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default Filter;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport ISMControl from './ISMControl.js';\nimport ISMRaw from './ISM.json';\nimport Filter from './Filter.js';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {\n  useLocation\n} from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons'\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n}\n\nconst App = () => {\n  const { hash } = useLocation();\n\n   /**\n   * Handles populating our controls from URL\n   * \n   * We use the identifierFilter feature to present them by default.\n   * \n   * If the query string includes controls, set it as opening state.\n   *  if not; simply set '' as opening state.\n   */\n  const urlQueryControls = useQuery().get('controls');\n  const urlControls = urlQueryControls === null\n    ? ''\n    : urlQueryControls;\n  /**\n   * As above, we use the same behavior to populate tagged controls.\n   */\n  const urlQueryControlsTagged = useQuery().get('tagged');\n  const urlControlsTagged = urlQueryControlsTagged === null\n    ? []\n    : urlQueryControlsTagged.split(',');\n\n  const ISM = ISMRaw.ISM.Control.sort((controlA, controlB) => controlA.Identifier - controlB.Identifier);\n\n  const [ interrogate, setInterrogate ] = useState({\n    controls: ISM,\n    controlList: ISM,\n    controlsTagged: urlControlsTagged,\n    descriptionFilter: '',\n    guidelineFilter: '',\n    identifierFilter: urlControls,\n    searchCollapse: false\n  });\n\n  useEffect(() => {\n    setInterrogate((previousState) => ({\n      ...previousState,\n      controlList: interrogate.controls\n        .filter(control => control.Description.toLowerCase().includes(interrogate.descriptionFilter.toLowerCase()))\n        .filter(control => control.Guideline.toLowerCase().includes(interrogate.guidelineFilter.toLowerCase()))\n        .filter(control => (interrogate.identifierFilter.split(',')[0] === '')\n          ? true\n          : interrogate.identifierFilter.split(',').includes(control.Identifier))\n    }))\n\n    // if no hash link, scroll to top\n    if (hash === '') {\n      window.scrollTo(0, 0);\n    }\n    // else scroll to id\n    else {\n      setTimeout(() => {\n        const id = hash.replace('#', '');\n        const element = document.getElementById(id);\n        if (element) {\n          element.scrollIntoView();\n        }\n      }, 0);\n    }\n  }, [interrogate.controls, interrogate.descriptionFilter, interrogate.guidelineFilter, interrogate.identifierFilter, hash])\n\n  const handleDescriptionChange = value => setInterrogate({...interrogate, descriptionFilter: value});\n\tconst handleGuidelineChange = value => setInterrogate({...interrogate, guidelineFilter: value});\n\tconst handleIdentifierChange = value => setInterrogate({...interrogate, identifierFilter: value});\n  const handleSearchCollapse = () => setInterrogate({...interrogate, searchCollapse: !interrogate.searchCollapse})\n\n  const handleTagControl = identifier => {\n    const newTaggedControls = interrogate.controlsTagged.includes(identifier)\n      ? interrogate.controlsTagged.filter(control => control !== identifier)\n      : [...interrogate.controlsTagged, identifier]\n    \n    setInterrogate({...interrogate, controlsTagged: newTaggedControls})\n  }\n\n\tconst guidelines = [...new Set(ISM\n\t  .map((control) => control.Guideline))];\n\n\tconst guidelineOptions = guidelines\n  \t.map((guideline) => <option key={guideline} value={guideline}>{guideline}</option>);\n\n  return (\n    <div className=\"App container\">\n      <div className=\"flex-row modal-header\" onClick={handleSearchCollapse} >\n        <h4 className={`d-flex w-100 justify-content-between collapse-content ${interrogate.searchCollapse ? 'collapsed' : 'expanded'}`} id=\"search\">Search</h4>\n        <FontAwesomeIcon\n          className={`chevron collapse-content ${interrogate.searchCollapse ? 'collapsed' : 'expanded'}`}\n          icon={faChevronUp}\n          size=\"1x\"\n          />\n        <FontAwesomeIcon\n          className={`chevron collapse-content ${interrogate.searchCollapse ? 'expanded' : 'collapsed'}`}\n          icon={faChevronDown}\n          size=\"1x\"\n        />\n      </div>\n      <div className={`collapse-content ${interrogate.searchCollapse ? 'collapsed' : 'expanded'}`}\n        aria-expanded={interrogate.searchCollapse}>\n        <Filter \n          handleDescriptionChange={handleDescriptionChange}\n          handleGuidelineChange={handleGuidelineChange}\n          handleIdentifierChange={handleIdentifierChange}\n          guidelineOptions={guidelineOptions}\n          interrogate={interrogate}\n        />\n      </div>\n      <div className=\"modal-header\">\n        <h4 className=\"control-counter\">Controls ({interrogate.controlList.length})</h4>\n        <h4 className=\"control-counter-tagged\" onDoubleClick={() => {navigator.clipboard.writeText('http://dmblack.github.io/ism-interrogator/?controls=' + interrogate.controlsTagged.join(','))}} onClick={() => {navigator.clipboard.writeText('http://dmblack.github.io/ism-interrogator/?tagged=' + interrogate.controlsTagged.join(','))}}>{interrogate.controlsTagged.length > 0 && 'Tagged (' + interrogate.controlsTagged.length + ')'}</h4>\n      </div>\n      <div className=\"list-group\">\n        {\n        interrogate.controlList\n          .map((control) => <ISMControl control={control} key={control.Identifier} tag={() => { handleTagControl(control.Identifier)}} tagged={interrogate.controlsTagged.includes(control.Identifier)} test={() => { console.log('Test')}} />)\n        }\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}