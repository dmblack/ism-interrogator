{"version":3,"sources":["ISMControl.js","App.js","serviceWorker.js","index.js"],"names":["ISMControl","props","className","id","control","Identifier","OFFICIAL","PROTECTED","SECRET","TOP_SECRET","Guideline","split","Topic","Description","Revision","Updated","App","useState","descriptionFilter","setDescriptionFilter","guidelineFilter","setGuidelineFilter","identifierFilter","setIdentifierFilter","ISM","ISMRaw","Control","ISMControls","filter","toLowerCase","includes","sort","controlA","controlB","map","guidelineOptions","Set","guideline","value","htmlFor","minLength","debounceTimeout","type","onChange","e","target","name","data-tip","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4b05a307.chunk.js","sourcesContent":["import React from 'react';\nimport './ISMControl.css';\nimport ScrollableAnchor from 'react-scrollable-anchor'\n\nfunction ISMControl(props) {\n  return (\n    <div className=\"list-group-item list-group-item-action flex-column align-tems-start control\">\n      <ScrollableAnchor id={props.control.Identifier}>\n        <div className=\"d-flex w-100 justify-content-between control-identifier\">\n\t        <h1 className=\"mb-1\">\n\t          {props.control.Identifier}\n\t        </h1>\n\t        <small className=\"control-applicability\">\n\t          [\n              {props.control.OFFICIAL === \"Yes\" ? \" OFFICIAL \" : \" \"}\n              {props.control.PROTECTED === \"Yes\" ? \"PROTECTED \" : \"\"}\n              {props.control.SECRET === \"Yes\" ? \"SECRET \" : \"\"}\n              {props.control.TOP_SECRET === \"Yes\" ? \"TOP_SECRET \" : \"\"}\n            ]\n\t        </small>\n\t      </div>\n\t    </ScrollableAnchor>\n\t    <h4 className=\"control-guideline\">\n\t      {props.control.Guideline.split('Guidelines for ')[1]}\n\t    </h4>\n\t    <h6 className=\"control-topic\">\n\t      {props.control.Topic}\n\t    </h6>\n\t    <p className=\"mb-1 control-description\">\n\t      {props.control.Description}\n\t    </p>\n\t    <div className=\"d-flex w-100 justify-content-between\">\n\t      <p className=\"mb-1\"></p>\n\t      <small className=\"control-revision-updated\">\n\t        Rev:{props.control.Revision} - {props.control.Updated}\n\t      </small>\n\t    </div>\n    </div>\n  );\n}\n\nexport default ISMControl;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React, { useState } from 'react';\nimport { DebounceInput } from 'react-debounce-input';\nimport './App.css';\nimport ISMControl from './ISMControl.js';\nimport ISMRaw from './ISM.json';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst App = () => {\n  const [ descriptionFilter, setDescriptionFilter ] = useState(\n    ''\n  );\n\n\tconst [ guidelineFilter, setGuidelineFilter ] = useState(\n\t\t''\n\t);\n\n\tconst [ identifierFilter, setIdentifierFilter ] = useState(\n    ''\n\t);\n  \n  const ISM = ISMRaw.ISM.Control;\n  const ISMControls = ISM\n    .filter((control) => control.Description.toLowerCase().includes(descriptionFilter.toLowerCase()))\n\t  .filter((control) => control.Guideline.toLowerCase().includes(guidelineFilter.toLowerCase()))\n\t  .filter((control) => (identifierFilter.split(',')[0] === '')\n      ? true\n      : identifierFilter.split(',').includes(control.Identifier))\n\t  .sort((controlA, controlB) => controlA.Identifier - controlB.Identifier)\n    .map((control) => <ISMControl key={control.Identifier} control={control} />);\n\n  const handleDescriptionChange = e => setDescriptionFilter(e.target.value);\n\tconst handleGuidelineChange = e => setGuidelineFilter(e.target.value);\n\tconst handleIdentifierChange = e => setIdentifierFilter(e.target.value);\n\n\tconst guidelines = [...new Set(ISM\n\t  .map((control) => control.Guideline))];\n\n\tconst guidelineOptions = guidelines\n  \t.map((guideline) => <option key={guideline} value={guideline}>{guideline}</option>);\n\n  return (\n    <div className=\"App container\">\n      <div className=\"modal-header\">\n        <h4 className=\"title\" id=\"search\">Search</h4>\n      </div>\n      <div className=\"form-group row filters\">\n\t\t    <label\n\t\t      htmlFor=\"description\"\n\t\t      className=\"col-sm-2 col-form-label\">\n\t\t      Description\n\t\t    </label>\n        <DebounceInput\n          minLength={2}\n          debounceTimeout={350}\n\t\t      id=\"description\"\n          value={descriptionFilter}\n          type=\"text\"\n\t\t\t\t  onChange={handleDescriptionChange}\n\t\t      className=\"form-control col-sm-10\"\n        />\n      </div>\n      <div className=\"form-group row\">\n\t\t    <label\n\t\t      htmlFor=\"guideline\"\n\t\t      className=\"col-sm-2 col-form-label\">\n\t\t      Guideline\n\t\t    </label>\n\t\t    <select\n\t\t\t\t  name=\"guideline\"\n\t\t\t\t  id=\"guideline\"\n\t\t      onChange={handleGuidelineChange}\n\t\t      className=\"form-control col-sm-10\">\n\t\t      <option value=\"\"></option>\n\t\t\t\t  {guidelineOptions}\n\t\t    </select>\n\t\t  </div>\n      <div className=\"form-group row\">\n\t\t    <label\n\t\t      htmlFor=\"identifier\"\n\t\t      className=\"col-sm-2 col-form-label\">\n\t\t\t\t  Identifier\n\t\t    </label>\n\t\t    <DebounceInput\n\t\t      minLength={1}\n\t\t      debounceTimeout={350}\n\t\t      id=\"identifier\"\n\t\t      value={identifierFilter}\n\t\t      type=\"text\"\n\t\t      onChange={handleIdentifierChange}\n\t\t      className=\"form-control col-sm-10\"\n          data-tip=\"Separate multiple with ','\"\n\t\t    />\n\t\t  </div>\n      <div className=\"modal-header\">\n        <h4 className=\"title\">Controls ({ISMControls.length})</h4>\n      </div>\n      <div className=\"list-group\">\n        {ISMControls}\n\t    </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}