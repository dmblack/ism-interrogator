{"version":3,"sources":["ISMControl.js","App.js","serviceWorker.js","index.js"],"names":["ISMControl","props","className","control","Identifier","Guideline","Section","Topic","OFFICIAL","PROTECTED","SECRET","TOP_SECRET","Revision","Updated","Description","App","useState","filter","setFilter","ISMControls","Object","entries","ISMRaw","ISM","Control","includes","map","key","value","type","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yp9RA4CeA,MAzCf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,eAChB,uBAAGA,UAAU,yBACVD,EAAME,QAAQC,aAGnB,wBAAIF,UAAU,+BACX,wBAAIA,UAAU,6BACXD,EAAME,QAAQE,WAElB,wBAAIH,UAAU,2BACXD,EAAME,QAAQG,SAEjB,wBAAIJ,UAAU,yBACXD,EAAME,QAAQI,OAEjB,wBAAIL,UAAU,iCAAd,iBAE8B,QAA3BD,EAAME,QAAQK,SAAqB,KAAO,GACd,QAA5BP,EAAME,QAAQM,UAAsB,KAAO,GAClB,QAAzBR,EAAME,QAAQO,OAAmB,KAAO,GACX,QAA7BT,EAAME,QAAQQ,WAAuB,MAAQ,IAEhD,wBAAIT,UAAU,4BAAd,aACaD,EAAME,QAAQS,UAE3B,wBAAIV,UAAU,2BAAd,WACWD,EAAME,QAAQU,UAG3B,yBAAKX,UAAU,aACb,uBAAGA,UAAU,yBACVD,EAAME,QAAQW,gB,OCLPC,G,MA1BH,WAAO,IAAD,EACcC,mBAC5B,IAFc,mBACRC,EADQ,KACAC,EADA,KAMVC,EADMC,OAAOC,QAAQC,EAAOC,IAAIC,SAEnCP,QAAO,SAACd,GAAD,OAAaA,EAAQ,GAAGW,YAAYW,SAASR,MACpDS,KAAI,SAACvB,GAAD,OAAa,kBAAC,EAAD,CAAYwB,IAAKxB,EAAQ,GAAGC,WAAYD,QAASA,EAAQ,QAI7E,OACE,yBAAKD,UAAU,OACX,2BACE0B,MAAOX,EACPY,KAAK,OACLC,SAPa,SAAAC,GAAC,OAAIb,EAAUa,EAAEC,OAAOJ,UAS5C,yBAAK1B,UAAU,OAEXiB,MCfac,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.da99e9b7.chunk.js","sourcesContent":["import React from 'react';\nimport './ISMControl.css';\n\nfunction ISMControl(props) {\n  return (\n    <div className=\"card ISMControl\">\n      <div className=\"card-header\">\n\t    <p className=\"card-title identifier\">\n\t      {props.control.Identifier}\n\t  </p>\n\t  </div>\n\t  <ul className=\"list-group list-group-flush\">\n      <li className=\"list-group-item guideline\">\n        {props.control.Guideline}\n      </li>\n\t    <li className=\"list-group-item section\">\n\t      {props.control.Section}\n\t    </li>\n\t    <li className=\"list-group-item topic\">\n\t      {props.control.Topic}\n\t    </li>\n\t    <li className=\"list-group-item applicability\">\n\t      Applicability:  \n\t      {props.control.OFFICIAL === \"Yes\" ? \"O \" : \"\"}\n\t      {props.control.PROTECTED === \"Yes\" ? \"P \" : \"\"}\n\t      {props.control.SECRET === \"Yes\" ? \"S \" : \"\"}\n\t      {props.control.TOP_SECRET === \"Yes\" ? \"TS \" : \"\"}\n\t    </li>\n\t    <li className=\"list-group-item revision\">\n\t      Revision: {props.control.Revision}\n\t    </li>\n\t    <li className=\"list-group-item updated\">\n\t      Update: {props.control.Updated}\n  \t  </li>\n\t  </ul>\n\t  <div className=\"card-body\">\n  \t  <p className=\"card-text description\">\n  \t    {props.control.Description}\n  \t  </p>\n\t  </div>\n    </div>\n  );\n}\n\nexport default ISMControl;\n","import React, { useState } from 'react';\nimport './App.css';\nimport ISMControl from './ISMControl.js';\nimport ISMRaw from './ISM.json';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst App = () => {\n  const [ filter, setFilter ] = useState(\n    ''\n  );\n  \n  const ISM = Object.entries(ISMRaw.ISM.Control);\n  const ISMControls = ISM\n    .filter((control) => control[1].Description.includes(filter))\n    .map((control) => <ISMControl key={control[1].Identifier} control={control[1]} />);\n\n  const handleChange = e => setFilter(e.target.value);\n\n  return (\n    <div className=\"App\">\n        <input\n          value={filter}\n          type=\"text\"\n          onChange={handleChange}\n        />\n\t  <div className=\"row\">\n\n      {ISMControls}\n\t  </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}